#! /usr/bin/env ruby

require "clap"
require_relative "../lib/ruster"

$verbose = 0

action, *args = Clap.run ARGV, "-v" => -> { $verbose += 1 }

USAGE = <<EOU
Usage: #{File.basename($0)} [-v] <action> ip:port [...]

Parameters

  -v        Increases verbosity level. Can be used more than once.

Actions

  create    ip:port [ip:port...]
            Creates a cluster with all the passed nodes

  add       cluster_ip:port ip:port
            Add node ip:port to the cluster at cluster_ip:port

  remove    cluster_ip:port ip:port
            Remove node from the cluster at cluster_ip:port
            Note that currently removing a node that has assigned
            slots breaks the cluster state.

  each      cluster_ip:port CMD...
            Execute Redis CMD in all nodes

  reshard   cluster_ip:port slots target_ip:port source_ip:port...
            Reshards `slots` slots into target_ip:port, taking slots
            proportionally from all the nodes in source_ip:port

            Accepts `-n n` to indicate a destination DB
            Accepts `-t ms` to indicate timeout for keys migration

EOU

abort USAGE if action.nil? or args.nil? or args.empty?

begin
  case action
  when "create"
    Ruster::Cluster.create!(args)
  when "add"
    cluster = Ruster::Cluster.new(Ruster::Node.new(args.shift))

    args.each do |addr|
      ip, port = addr.split(":")
      cluster.add_node(ip, port)
    end
  when "remove"
    cluster = Ruster::Cluster.new(Ruster::Node.new(args.shift))

    args.each do |addr|
      node = Ruster::Node.new(addr)
      node.load!
      cluster.remove_node(node)
    end
  when "each"
    cluster = Ruster::Cluster.new(Ruster::Node.new(args.shift))

    cluster.each(*args) do |node, res|
      puts "> #{node}"
      puts res
    end
  when "reshard"
    cluster = Ruster::Cluster.new(Ruster::Node.new(args.shift))

    num_slots, target_addr, *sources_addr = args

    target  = Ruster::Node.new(target_addr)
    sources = sources_addr.map{ |addr| Ruster::Node.new(addr) }

    cluster.reshard(target, num_slots.to_i, sources)
  else
    abort "Unrecognized action `#{action}'\n#{USAGE}"
  end
rescue => ex
  $stderr.puts ex.message
  ex.backtrace.each{ |line| $stderr.puts line } if $verbose > 1
  exit 2
end
